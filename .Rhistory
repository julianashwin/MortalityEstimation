channel == "Wealth Adjust" ~ "Complete: PE",
TRUE ~ channel)) %>%
mutate(tau_val = case_when(tauR == 0.12 ~ "Baseline (0.12)",
tauR == 0.18 ~ "Higher (0.18)",
tauR == 0.05 ~ "Lower (0.05)")) %>%
mutate(utility = health*(((consumption^eta * leisure^(1-eta))^(1-gamma))/(1-gamma)+5)) %>%
mutate(hours = 1 - leisure) %>%
pivot_longer(cols = c(consumption, wealth, hours, wage, health, utility)) %>%
mutate(name = str_to_title(name)) %>%
mutate(tau_val = factor(tau_val, levels = c("Lower (0.05)", "Baseline (0.12)", "Higher (0.18)"), ordered = T)) %>%
filter(age < 100 | !(name %in% c("Consumption", "Utility"))) %>%
ggplot() + theme_bw() +
facet_wrap(~name, scales = "free_y") +
geom_line(aes(x = age, y = value, color = tau_val)) +
scale_color_manual(expression(Value~of~tau[R]), values = c("Baseline (0.12)" = "black", "Higher (0.18)" = "blue", "Lower (0.05)" = "firebrick")) +
labs(x = "Age", y = "")
ggsave("presentation_figs/socsec_baseline_lifecycle.pdf", width = 6.5, height = 4)
df %>%
filter(channel == "Wealth Adjust" & model == "Complete") %>%
mutate(channel = case_when(channel == "Baseline" ~ "Incomplete: Baseline",
channel == "GE" ~ "Complete: GE",
channel == "Wealth Adjust" ~ "Complete: PE",
TRUE ~ channel)) %>%
mutate(tau_val = case_when(tauR == 0.12 ~ "Baseline (0.12)",
tauR == 0.18 ~ "Higher (0.18)",
tauR == 0.05 ~ "Lower (0.05)")) %>%
mutate(utility = health*(((consumption^eta * leisure^(1-eta))^(1-gamma))/(1-gamma)+5)) %>%
mutate(hours = 1 - leisure) %>%
pivot_longer(cols = c(consumption, wealth, hours, wage, health, utility)) %>%
mutate(name = str_to_title(name)) %>%
mutate(tau_val = factor(tau_val, levels = c("Lower (0.05)", "Baseline (0.12)", "Higher (0.18)"), ordered = T)) %>%
filter(age < 100 | !(name %in% c("Consumption", "Utility"))) %>%
ggplot() + theme_bw() +
facet_wrap(~name, scales = "free_y") +
geom_line(aes(x = age, y = value, color = tau_val)) +
scale_color_manual(expression(Value~of~tau[R]), values = c("Baseline (0.12)" = "black", "Higher (0.18)" = "blue", "Lower (0.05)" = "firebrick")) +
labs(x = "Age", y = "")
ggsave("presentation_figs/socsec_partial_lifecycle.pdf", width = 6.5, height = 4)
df %>%
filter((channel == "Wealth Adjust" & model == "Complete") | (model == "Baseline" & channel == "Baseline")) %>%
mutate(utility = health*(((consumption^eta * leisure^(1-eta))^(1-gamma))/(1-gamma)+5)) %>%
group_by(model, tauR) %>%
summarise(mean_u = sum(pop*utility)/sum(pop))
p1 <- df %>%
mutate(channel = case_when(channel == "Baseline" ~ "Incomplete: Baseline",
channel == "GE" ~ "Complete: GE",
channel == "Wealth Adjust" ~ "Complete: PE",
TRUE ~ channel)) %>%
mutate(channel = factor(channel, levels = c("Incomplete: Baseline", "Complete: PE", "Complete: GE"), ordered = T)) %>%
filter(tauR != 0.05) %>%
mutate(tau_val = case_when(tauR == 0.12 ~ "Baseline (0.12)",
tauR == 0.18 ~ "Higher (0.18)",
tauR == 0.05 ~ "Lower (0.05)")) %>%
ggplot(aes(x = age)) + theme_bw() +
facet_wrap(~channel) +
geom_line(aes(y = `WTP BC`, color = tau_val)) +
labs(x = "Age", y = "WTP", color = expression(Value~of~tau[R])) +
scale_color_manual("", values = c("Baseline (0.12)" = "black", "Higher (0.18)" = "blue")) +
labs(x = "", y = "WTP")
p1
p2 <- df %>%
mutate(pop_WTP = pop*`WTP BC`) %>%
mutate(channel = case_when(channel == "Baseline" ~ "Incomplete: Baseline",
channel == "GE" ~ "Complete: GE",
channel == "Wealth Adjust" ~ "Complete: PE",
TRUE ~ channel)) %>%
mutate(channel = factor(channel, levels = c("Incomplete: Baseline", "Complete: PE", "Complete: GE"), ordered = T)) %>%
filter(tauR != 0.05) %>%
mutate(tau_val = case_when(tauR == 0.12 ~ "Baseline (0.12)",
tauR == 0.18 ~ "Higher (0.18)",
tauR == 0.05 ~ "Lower (0.05)")) %>%
pivot_wider(id_cols = c(age, channel), names_from =  c(tau_val), values_from = pop_WTP) %>%
mutate(total = `Higher (0.18)` - `Baseline (0.12)`) %>%
mutate(change_col = case_when(total > 0 ~ "Increase",
total <= 0 ~ "Decrease")) %>%
ggplot(aes(x = age)) + theme_bw() +
facet_wrap(~channel) +
geom_bar(aes(y = total, fill = change_col), stat = "identity", position = "stack") +
scale_fill_manual("Effect on\naggregate WTP", values = c("Increase" = "forestgreen", "Decrease" = "firebrick")) +
scale_color_manual(expression(Value~of~tau[R]), values = c("Baseline (0.12)" = "black", "Higher (0.18)" = "blue")) +
geom_hline(aes(yintercept = 0, color = "Higher (0.18)")) +
geom_hline(aes(yintercept = 0, color = "Baseline (0.12)")) +
labs(x = "Age", y = "Change in aggregate WTP")
p2
ggarrange(p1, p2, nrow = 2, legend.grob = get_legend(p2), legend = "right")
ggsave("presentation_figs/higher_social_security_wtp.pdf", width = 8, height = 4.5)
p1 <- df %>%
mutate(channel = case_when(channel == "Baseline" ~ "Incomplete: Baseline",
channel == "GE" ~ "Complete: GE",
channel == "Wealth Adjust" ~ "Complete: PE",
TRUE ~ channel)) %>%
mutate(channel = factor(channel, levels = c("Incomplete: Baseline", "Complete: PE", "Complete: GE"), ordered = T)) %>%
filter(tauR != 0.18) %>%
mutate(tau_val = case_when(tauR == 0.12 ~ "Baseline (0.12)",
tauR == 0.18 ~ "Higher (0.18)",
tauR == 0.05 ~ "Lower (0.05)")) %>%
ggplot(aes(x = age)) + theme_bw() +
facet_wrap(~channel) +
geom_line(aes(y = `WTP BC`, color = tau_val)) +
labs(x = "Age", y = "WTP", color = expression(Value~of~tau[R])) +
scale_color_manual("", values = c("Baseline (0.12)" = "black", "Lower (0.05)" = "blue")) +
labs(x = "", y = "WTP")
p1
p2 <- df %>%
mutate(pop_WTP = pop*`WTP BC`) %>%
mutate(channel = case_when(channel == "Baseline" ~ "Incomplete: Baseline",
channel == "GE" ~ "Complete: GE",
channel == "Wealth Adjust" ~ "Complete: PE",
TRUE ~ channel)) %>%
mutate(channel = factor(channel, levels = c("Incomplete: Baseline", "Complete: PE", "Complete: GE"), ordered = T)) %>%
filter(tauR != 0.18) %>%
mutate(tau_val = case_when(tauR == 0.12 ~ "Baseline (0.12)",
tauR == 0.18 ~ "Higher (0.18)",
tauR == 0.05 ~ "Lower (0.05)")) %>%
pivot_wider(id_cols = c(age, channel), names_from =  c(tau_val), values_from = pop_WTP) %>%
mutate(total = `Lower (0.05)` - `Baseline (0.12)`) %>%
mutate(change_col = case_when(total > 0 ~ "Increase",
total <= 0 ~ "Decrease")) %>%
ggplot(aes(x = age)) + theme_bw() +
facet_wrap(~channel) +
geom_bar(aes(y = total, fill = change_col), stat = "identity", position = "stack") +
scale_fill_manual("Effect on\naggregate WTP", values = c("Increase" = "forestgreen", "Decrease" = "firebrick")) +
scale_color_manual(expression(Value~of~tau[R]), values = c("Baseline (0.12)" = "black", "Lower (0.05)" = "blue")) +
geom_hline(aes(yintercept = 0, color = "Lower (0.05)")) +
geom_hline(aes(yintercept = 0, color = "Baseline (0.12)")) +
labs(x = "Age", y = "Change in aggregate WTP")
p2
ggarrange(p1, p2, nrow = 2, legend.grob = get_legend(p2), legend = "right")
ggsave("presentation_figs/lower_social_security_wtp.pdf", width = 8, height = 4.5)
df %>%
filter((channel == "Wealth Adjust" & model == "Complete") | (model == "Baseline" & channel == "Baseline")) %>%
mutate(utility = health*(((consumption^eta * leisure^(1-eta))^(1-gamma))/(1-gamma)+5)) %>%
group_by(model, tauR) %>%
summarise(mean_u = sum(pop*utility)/sum(pop))
df <- read_csv("export_data/baseline.csv") %>%
#select(age ,tauR , tauN    , b   ,  w    , r, consumption   ,   wealth ,leisure ,income , wage ,health  , WTP) %>%
#rename(lesiure = leisure) %>%
mutate(model = "Baseline", channel = "Baseline") %>%
rbind(read_csv("export_data/retirement/retire_wcons.csv") %>%
mutate(model = "Incomplete", channel = "Wealth Constant")) %>%
rbind(read_csv("export_data/retirement/retire_wadj.csv") %>%
mutate(model = "Incomplete", channel = "Wealth Adjust")) %>%
rbind(read_csv("export_data/retirement/retire_ge.csv") %>%
mutate(model = "Incomplete", channel = "GE")) %>%
# Complete
rbind(read_csv("export_data/retirement/comp_retire_wcons.csv") %>%
#select(age ,tauR , tauN    , b   ,  w    , r, consumption   ,   wealth ,lesiure ,income , wage ,health  , WTP) %>%
mutate(model = "Complete", channel = "Wealth Constant")) %>%
rbind(read_csv("export_data/retirement/comp_retire_wadj.csv") %>%
#select(age ,tauR , tauN    , b   ,  w    , r, consumption   ,   wealth ,lesiure ,income , wage ,health  , WTP) %>%
mutate(model = "Complete", channel = "Wealth Adjust")) %>%
rbind(read_csv("export_data/retirement/comp_retire_ge.csv") %>%
#select(age ,tauR , tauN    , b   ,  w    , r, consumption   ,   wealth ,lesiure ,income , wage ,health  , WTP) %>%
mutate(model = "Complete", channel = "GE")) %>%
mutate(d = 5.5500e-05, k0 = 0.081) %>%
mutate(pop = exp(-d*age - exp(k0*(age - 85)) - exp(-k0*85)))
df %>%
ggplot() +theme_bw() +
facet_wrap(~channel) +
geom_line(aes(x = age, y = WTP, color = model))
ggsave("presentation_figs/retire.pdf", width = 6, height = 4)
df
p1 <- df %>%
mutate(pop_WTP = pop*WTP) %>%
mutate(model = case_when(channel == "Baseline" ~ "Baseline",
#model == "Incomplete" & channel == "Wealth Adjust" ~ "Incomplete: PE",
model == "Incomplete" & channel == "GE" ~ "Incomplete: GE",
model == "Complete" & channel == "Wealth Adjust" ~ "Complete: PE",
model == "Complete" & channel == "GE" ~ "Complete: GE",
TRUE ~ NA_character_)) %>%
filter(!is.na(model)) %>%
group_by(age) %>%
mutate(WTP_base = max((model == "Baseline")*WTP)) %>%
filter(model != "Baseline") %>%
mutate(model = factor(model, levels = c("Incomplete: GE", "Incomplete: PE", "Complete: PE", "Complete: GE"), ordered = T)) %>%
ggplot(aes(x = age)) + theme_bw() +
facet_wrap(~model, nrow = 1) +
geom_line(aes(y = WTP, color = "Productive Ageing")) +
geom_line(aes(y = WTP_base, color = "Baseline")) +
scale_color_manual("Model", values = c("Baseline" = "black", "Productive Ageing" = "blue")) +
labs(x = "", y = "WTP")
p1
p2 <- df %>%
mutate(model = case_when(channel == "Baseline" ~ "Baseline",
#model == "Incomplete" & channel == "Wealth Adjust" ~ "Incomplete: PE",
model == "Incomplete" & channel == "GE" ~ "Incomplete: GE",
model == "Complete" & channel == "Wealth Adjust" ~ "Complete: PE",
model == "Complete" & channel == "GE" ~ "Complete: GE",
TRUE ~ NA_character_)) %>%
filter(!is.na(model)) %>%
group_by(age) %>%
mutate(pop_WTP = pop*WTP) %>%
mutate(pop_WTP_base = max((model == "Baseline")*pop_WTP)) %>%
filter(model != "Baseline") %>%
mutate(model = factor(model, levels = c("Incomplete: GE", "Incomplete: PE", "Complete: PE", "Complete: GE"), ordered = T)) %>%
mutate(total = pop_WTP - pop_WTP_base) %>%
mutate(change_col = case_when(total > 0 ~ "Increase",
total <= 0 ~ "Decrease")) %>%
ggplot(aes(x = age)) + theme_bw() +
facet_wrap(~model) +
geom_bar(aes(y = total, fill = change_col), stat = "identity", position = "stack") +
scale_fill_manual("Effect on\naggregate WTP", values = c("Increase" = "forestgreen", "Decrease" = "firebrick")) +
scale_color_manual("Model", values = c("Baseline" = "black", "Productive Ageing" = "blue")) +
geom_hline(aes(yintercept = 0, color = "Productive Ageing")) +
geom_hline(aes(yintercept = 0, color = "Baseline")) +
labs(x = "Age", y = "Change in aggregate WTP")
p2
ggarrange(p1, p2, nrow = 2, legend.grob = get_legend(p2), legend = "right")
ggsave("presentation_figs/prod_ageing_wtp.pdf", width = 8, height = 4.5)
df %>%
mutate(model = case_when(channel == "Baseline" ~ "Baseline",
#model == "Incomplete" & channel == "Wealth Adjust" ~ "Incomplete: PE",
model == "Incomplete" & channel == "GE" ~ "Incomplete: GE",
model == "Complete" & channel == "Wealth Adjust" ~ "Complete: PE",
model == "Complete" & channel == "GE" ~ "Complete: GE",
TRUE ~ NA_character_)) %>%
filter(!is.na(model)) %>%
mutate(utility = health*(((consumption^eta * leisure^(1-eta))^(1-gamma))/(1-gamma)+5)) %>%
mutate(hours = 1 - leisure) %>%
pivot_longer(cols = c(consumption, wealth, hours, wage, health, utility)) %>%
mutate(name = str_to_title(name)) %>%
mutate(model = factor(model, levels = c("Baseline", "Incomplete: GE", "Incomplete: PE", "Complete: PE", "Complete: GE"), ordered = T)) %>%
filter(age < 100 | !(name %in% c("Consumption", "Utility"))) %>%
ggplot() + theme_bw() +
facet_wrap(~name, scales = "free_y") +
geom_line(aes(x = age, y = value, color = model)) +
scale_color_manual(expression(Value~of~tau[R]), values = c("Baseline" = "black", "Incomplete: PE" = "pink", "Incomplete: GE" = "blue",
"Complete: PE" = "firebrick", "Complete: GE" = "forestgreen")) +
labs(x = "Age", y = "")
ggsave("presentation_figs/prodage_lifecycle.pdf", width = 6.5, height = 4)
df %>%
group_by(model, channel) %>%
distinct(tauR, tauN, b, w, r, eta, gamma, beta, amin) %>%
rename(`Income Tax` = tauN, `Social Security` = b, `Wage Rate` = w, `Interest Rate` = r) %>%
filter(channel %in% c("Baseline", "GE")) %>%
pivot_longer(cols = c(`Income Tax`, `Social Security`, `Wage Rate`, `Interest Rate`)) %>%
mutate(model = factor(model, levels = c("Baseline", "Incomplete", "Complete"), ordered = T)) %>%
ggplot() + theme_bw() +
facet_wrap(~name, scales = "free_y") +
geom_bar(aes(x = 1, y = value, fill = model), stat = "identity", position = "dodge") +
scale_fill_manual("Model", values = c("Baseline" = "black", "Incomplete" = "blue", "Complete" = "forestgreen")) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
labs(x = "", y = "Equilibrium Value")
ggsave("presentation_figs/ge_price_effects_prodageing.pdf", width = 4, height = 3)
df %>%
filter((channel == "GE" & model == "Incomplete") | (channel == "GE" & model == "Complete") | (model == "Baseline" & channel == "Baseline")) %>%
mutate(utility = health*(((consumption^eta * leisure^(1-eta))^(1-gamma))/(1-gamma)+5)) %>%
group_by(model, channel) %>%
summarise(mean_u = sum(pop*utility)/sum(pop))
x<- df %>%
filter((channel == "GE" & model == "Incomplete") | (channel == "GE" & model == "Complete") | (model == "Baseline" & channel == "Baseline")) %>%
mutate(utility = health*(((consumption^eta * leisure^(1-eta))^(1-gamma))/(1-gamma)+5)) %>%
group_by(model, channel) %>%
summarise(mean_u = sum(pop*utility)/sum(pop))
x
View(x)
setwd("/Users/julianashwin/Documents/GitHub/QualGPT/")
rm(list=ls())
library(tidyverse)
library(fixest)
library(janitor)
library(vader)
library(progress)
library(ggstar)
library(tidytext)
library(ggwordcloud)
library(doc2vec)
library(beepr)
library(tictoc)
source("analysis_fns.R")
"
Define variables and names
"
qual_vars <- c("religious", "secular", "no_ambition", "job_secular",
"vocational_training", "entrepreneur", "education_high", "education_neutral",
"education_low", "education_religious", "marriage", "migration",
"reliance_on_god", "ability_high", "ability_low",
"budget_high", "budget_low", "awareness_information_high",
"awareness_information_low")
group_annot_names <- function(name){
for (ii in 1:length(name)){
if (name[ii] %in% c("Religious", "Secular")){
name[ii] <- str_c("Aspiration: ", name[ii])
}
if (name[ii] %in% c("No Ambition", "Job Secular","Vocational Training", "Entrepreneur",
"Education High", "Education Neutral","Education Low", "Education Religious",
"Marriage", "Migration")){
name[ii] <- str_c("Ambition: ", name[ii])
}
if (name[ii] %in% c("Reliance On God", "Ability High", "Ability Low",
"Budget High", "Budget Low", "Awareness Information High",
"Awareness Information Low")){
name[ii] <- str_c("Capacity: ", name[ii])
}
}
return(name)
}
qual_vars <- c("religious", "secular", "no_ambition", "job_secular",
"vocational_training", "entrepreneur", "education_high", "education_neutral",
"education_low", "education_religious", "marriage", "migration",
"reliance_on_god", "ability_high", "ability_low",
"budget_high", "budget_low", "awareness_information_high",
"awareness_information_low")
qual_factor <- c("Aspiration: Religious", "Aspiration: Secular", "Ambition: No Ambition", "Ambition: Job Secular",
"Ambition: Vocational Training", "Ambition: Entrepreneur", "Ambition: Education High", "Ambition: Education Neutral",
"Ambition: Education Low", "Ambition: Education Religious", "Ambition: Marriage", "Ambition: Migration",
"Capacity: Reliance On God", "Capacity: Ability High", "Capacity: Ability Low",
"Capacity: Budget High", "Capacity: Budget Low", "Capacity: Awareness Information High",
"Capacity: Awareness Information Low")
model_factor = c("ChatGPT", "Llama-2 13B chat", "Llama-2 13B",
"iQual + ChatGPT aug (0.5)", "iQual + ChatGPT aug (0.6)", "iQual + ChatGPT aug (0.7)",
"iQual + ChatGPT aug (0.8)", "iQual + ChatGPT aug (0.9)", "iQual + ChatGPT aug (0.95)",
"iQual + ChatGPT aug", "iQual", "Random")
model_factor_short = c("ChatGPT", "Llama-2 13B chat", "Llama-2 13B", "iQual + ChatGPT aug", "iQual")
quant_vars_used <- c("refugee", "num_child", "hh_head_sex", "hh_head_age",
#"int_sex", "int_age",
"parent_eduyears", "parent_reledu",
"eld_sex", "eld_age", "hh_income")
quant_vars_used <- c("refugee", "num_child", "hh_head_sex", "hh_head_age", #"int_sex", "int_age",
"parent_eduyears", "parent_reledu",
"eld_sex", "eld_age",
"hh_asset_index", "hh_income",
"int_trauma_exp")
resizebox = function(x, tabwidth){
tex2add = "\\resizebox{\\linewidth}{!}{%\n"
if(!missing(tabwidth)){
tex2add = paste0("\\resizebox{", tabwidth, "\\linewidth}{!}{%\n")
}
x[x == "%start:tab\n"] = tex2add
x[x == "%end:tab\n"] = " % \n }"
#x <- str_squish(x)
#x <- str_replace(x, "% }", " % \n }")
x
}
quant_df <- read_csv("data/hh_quant.csv")
transcripts_df <- read_csv("data/transcripts.csv")
base_preds_df <- readRDS("data/predictions/base_preds.rds")  %>%
group_by(uid, sentence_index, annotated) %>%
summarise(across(where(is.numeric), median)) %>%
combine_w_quant(quant_df, round = "r2_r3") %>%
mutate(data_round = case_when(str_detect(uid_round, "R2") ~ "R2", TRUE ~ "R3")) %>%
get_annot_errors(qual_vars) %>%
left_join(transcripts_df) %>%
tibble()
sent_level_quant <- base_preds_df[,c("sentence_index", "uid_round", "data_round", quant_vars_used)]
base_test_preds_df <- readRDS("data/predictions/base_preds.rds")  %>%
filter(split == "test") %>%
group_by(uid, sentence_index, annotated) %>%
summarise(across(where(is.numeric), median)) %>%
combine_w_quant(quant_df, round = "r2_r3") %>%
mutate(data_round = case_when(str_detect(uid_round, "R2") ~ "R2", TRUE ~ "R3")) %>%
get_annot_errors(qual_vars) %>%
left_join(transcripts_df) %>%
tibble()
## ChatGPT predictions
chatgpt_preds_df <- readRDS("data/predictions/chatgpt_preds.rds") %>%
combine_w_quant(quant_df, round = "r2_r3") %>%
mutate(data_round = case_when(str_detect(uid_round, "R2") ~ "R2", TRUE ~ "R3")) %>%
rename(annotated = annotation_status) %>%
mutate(annotated = as.numeric(annotated == "annotated")) %>%
get_annot_errors(qual_vars)  %>%
left_join(transcripts_df) %>%
tibble()
chatgpt_test_preds_df <- chatgpt_preds_df %>%
filter(sentence_index %in% base_test_preds_df$sentence_index)
## Llama predictions
llama_preds_df <- readRDS("data/predictions/llama_preds.rds") %>%
rename(true_value = true_val, pred_value = pred_val) %>%
mutate(cossim_threshold = NA_character_, sample = "all", error = true_value - pred_value) %>%
select(model, cossim_threshold, sample, sentence_index, annotation, true_value, pred_value, error)
llama_test_preds_df <- llama_preds_df %>%
mutate(sample = "test") %>%
filter(sentence_index %in% base_test_preds_df$sentence_index)
## Augmentation predictions
aug_preds_df <- readRDS("data/predictions/aug_preds_0p5.rds") %>%
rbind(readRDS("data/predictions/aug_preds_0p6.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p7.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p8.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p9.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p95.rds")) %>%
group_by(uid, sentence_index, annotated, cossim_threshold) %>%
summarise(across(where(is.numeric), median)) %>%
combine_w_quant(quant_df, round = "r2_r3") %>%
mutate(data_round = case_when(str_detect(uid_round, "R2") ~ "R2", TRUE ~ "R3")) %>%
get_annot_errors(qual_vars) %>%
left_join(transcripts_df) %>%
tibble()
aug_test_preds_df <- readRDS("data/predictions/aug_preds_0p5.rds") %>%
rbind(readRDS("data/predictions/aug_preds_0p6.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p7.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p8.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p9.rds")) %>%
rbind(readRDS("data/predictions/aug_preds_0p95.rds")) %>%
filter(split == "test") %>%
group_by(uid, sentence_index, annotated, cossim_threshold) %>%
summarise(across(where(is.numeric), median)) %>%
combine_w_quant(quant_df, round = "r2_r3") %>%
mutate(data_round = case_when(str_detect(uid_round, "R2") ~ "R2", TRUE ~ "R3")) %>%
get_annot_errors(qual_vars) %>%
left_join(transcripts_df) %>%
tibble()
source("~/Documents/GitHub/QualGPT/explore_bias.R")
setwd("/Users/julianashwin/Documents/GitHub/MortalityEstimation/")
rm(list=ls())
require(ggplot2)
require(ggpubr)
require(HMDHFDplus)
require(stringr)
require(plyr)
"
Import data for all available countries
"
## Mortality, survival and life expectancy
# Function to import hmd lifetable data from a given directory
import_hmd_data <- function(import_dir){
var_names <- c("code", "year", "age", "mx", "lx", "ex")
# Initialise dataframe to fill with each country
lifetab_df <- as.data.frame(matrix(NA, nrow = 0, ncol = length(var_names)), var_names)
files <- dir(import_dir)
for (file in files){
print(file)
country_code <- str_split(file, "\\.")[[1]][1]
country_df <- as.data.frame(read.table(paste0(import_dir,file), header = TRUE, skip = 2))
country_df <- cbind(code = country_code, country_df)
country_df$year <- country_df$Year
country_df$age <- country_df$Age
country_df$mx[which(country_df$mx == ".")] <- NA
country_df$mx <- as.numeric(country_df$mx)
country_df$lx[which(country_df$lx == ".")] <- NA
country_df$lx <- as.numeric(country_df$lx)/100000
country_df$ex[which(country_df$ex == ".")] <- NA
country_df$ex <- as.numeric(country_df$ex)
lifetab_df <- rbind(lifetab_df, country_df[,var_names])
}
lifetab_df <- lifetab_df[which(lifetab_df$age != "110+"),]
lifetab_df$age <- as.numeric(lifetab_df$age)
lifetab_df <- lifetab_df[which(!is.na(lifetab_df$mx)),]
return(lifetab_df)
}
lifetab_df_female <- import_hmd_data("data/raw/fltper_1x1/")
lifetab_df_male <- import_hmd_data("data/raw/mltper_1x1/")
lifetab_df_both <- import_hmd_data("data/raw/bltper_1x1/")
# Combine these mortality curves for the separate genders
names(lifetab_df_female)[4:6] <- paste0(c("mx","lx", "ex"),"_f")
names(lifetab_df_male)[4:6] <- paste0(c("mx","lx", "ex"),"_m")
lifetab_df <- merge(lifetab_df_both, lifetab_df_female, by = c("code", "year", "age"))
lifetab_df <- merge(lifetab_df, lifetab_df_male, by = c("code", "year", "age"))
rm(lifetab_df_both, lifetab_df_female, lifetab_df_male)
## Population
# Initialise dataframe to fill with each country
pop_names <- c("code", "year", "age", "Male", "Female", "Total")
pop_df <- as.data.frame(matrix(NA, nrow = 0, ncol = length(pop_names)), pop_names)
# Identify which directory to import from
import_dir <- "data/raw/Population/"
files <- dir(import_dir)
for (file in files){
print(file)
country_code <- str_split(file, "\\.")[[1]][1]
country_df <- as.data.frame(read.table(paste0(import_dir,file), header = TRUE, skip = 2))
country_df <- cbind(code = country_code, country_df)
country_df$year <- country_df$Year
country_df$age <- country_df$Age
country_df$Female[which(country_df$Female == ".")] <- NA
country_df$Female <- as.numeric(country_df$Female)
country_df$Male[which(country_df$Male == ".")] <- NA
country_df$Male <- as.numeric(country_df$Male)
country_df$Total[which(country_df$Total == ".")] <- NA
country_df$Total <- as.numeric(country_df$Total)
pop_df <- rbind(pop_df, country_df[,pop_names])
}
rm(country_df, file, files, country_code)
pop_df <- pop_df[which(pop_df$age != "110+"),]
pop_df$age <- as.numeric(pop_df$age)
pop_df <- pop_df[which(!is.na(pop_df$Total)),]
lifetab_df <- merge(lifetab_df, pop_df, by = c("code", "year", "age"), all.x = T)
lifetab_df <- lifetab_df[with(lifetab_df, order(code, year, age)), ]
rm(pop_df)
# Fix some codes up
unique(lifetab_df$code)
lifetab_df$code[which(lifetab_df$code == "DEUTNP")] <- "DEU"
lifetab_df$code[which(lifetab_df$code == "FRATNP")] <- "FRA"
lifetab_df$code[which(lifetab_df$code == "GBR_NIR")] <- "NIR"
lifetab_df$code[which(lifetab_df$code == "GBR_NP")] <- "GBR"
lifetab_df$code[which(lifetab_df$code == "GBR_SCO")] <- "SCO"
lifetab_df$code[which(lifetab_df$code == "GBRTENW")] <- "ENW"
lifetab_df$code[which(lifetab_df$code == "NZL_NP")] <- "NZL"
extra_nzl_years <- unique(lifetab_df$year[which(lifetab_df$code == "NZL")])[
which(!unique(lifetab_df$year[which(lifetab_df$code == "NZL")]) %in%
unique(lifetab_df$year[which(lifetab_df$code == "NZL_NM")]))]
extra_obs <- lifetab_df[which(lifetab_df$code == "NZL" & lifetab_df$year %in% extra_nzl_years),]
extra_obs$code <- "NZL_NM"
lifetab_df <- rbind(lifetab_df, extra_obs)
rm(extra_obs, extra_nzl_years)
unique(lifetab_df$code)
lifetab_df <- lifetab_df[which(lifetab_df$code != "FRACNP"),]
lifetab_df <- lifetab_df[which(lifetab_df$code != "GBRCENW"),]
ex_df <- lifetab_df[which(lifetab_df$year >= 1900 & lifetab_df$age == 0 &
lifetab_df$ex_f >= 60),]
ggplot(ex_df, aes(x = year, y = ex_f)) +
geom_line(aes(group = code, color = code)) + scale_color_discrete(name = "Country") +
xlab("Year") + ylab("LE(0)") + theme_bw() +
ggtitle("2010")
current_ex_df <- lifetab_df[which(lifetab_df$year == 2018 & lifetab_df$age == 0 &
lifetab_df$ex_f >= 84),]
rm(ex_df,current_ex_df)
lifetab_df
tibble(lifetab_df)
lifetab_df_pre85 <- read_xlsx("/Users/julianashwin/Documents/Research/MortalityEstimation/data/WPP2022_MORT_F06_3_SINGLE_AGE_LIFE_TABLE_ESTIMATES_FEMALE.xlsx",
skip = 16, sheet = "Estimates 1950-1985")
library(readxl)
wpp_df_pre85 <- read_xlsx("/Users/julianashwin/Documents/Research/MortalityEstimation/data/WPP2022_MORT_F06_3_SINGLE_AGE_LIFE_TABLE_ESTIMATES_FEMALE.xlsx",
skip = 16, sheet = "Estimates 1950-1985")
