require(rstan)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
require(rstan)
install.packages("tranlateR")
install.packages("RSelenium")
install.packages("rvest")
install.packages("tidyverse")
install.packages("RSelenium")
install.packages("rvest")
require(RSelenium)
require(rvest)
require(tidyverse)
rD <- rsDriver(browser="firefox", port=4545L, verbose=F)
remDr <- rD[["client"]]
remDr$navigate("https://www.fcc.gov/media/engineering/dtvmaps")
zip <- "30308"
remDr$findElement(using = "id", value = "startpoint")$sendKeysToElement(list(zip))
remDr$findElements("id", "btnSub")[[1]]$clickElement()
remDr$findElements("id", "btnSub")[[1]]$clickElement()
remDr$findElements("id", "btnSub")[[1]]$clickElement()
exp(-10)
exp(5)
exp(1)
exp(0.5)
exp(0)
exp(0.0001)
exp(-1)
exp(-10)
exp(-10+1)
exp(-10-1)
log(0.000123)
log(0.1)
log(0.01)
log(0.001)
log(0.00001)
setwd("/Users/julianashwin/Documents/GitHub/bangla-nlp/")
rm(list=ls())
require(ggplot2)
require(ggpubr)
require(scales)
require(rcompanion)
require(plyr)
require(stargazer)
require(pROC)
require(gridExtra)
require(stringr)
require(MASS)
require(reshape2)
require(lfe)
require(dplyr)
require(tidyr)
source("R2_R3_comparison/analysis_fns.R")
"
Define directories and variables
"
btstrp_dir <- "/Users/julianashwin/Documents/Research/World_Bank/Aspirations_v2/bootstraps/"
import_dir <- "/Users/julianashwin/Documents/GitHub/NLPQualToolkit/results/base_anno_results/"
export_dir <- "/Users/julianashwin/Documents/Research/World_Bank/Aspirations_v2/figures/asp/"
quant_vars <- c("hh_in_r2", "hh_in_r3", "refugee", "num_child_r2", "num_child_r3", "hh_head_sex",
"int_sex_r2", "int_age_r2", "int_sex_r3", "int_age_r3",
"parent_eduyears_r3", "parent_reledu_r3", "parent_eduyears_r2", "parent_reledu_r2",
"eld_sex_r3", "eld_age_r3", "eld_edu_ambition_r3",
"eld_sex_r2", "eld_age_r2", "eld_edu_ambition_r2",
"hh_cons_capita","hh_asset_index", "hh_income",
"int_trauma_exp_r3", "int_trauma_witness_r3", "int_trauma_heard_r3",
"int_trauma_exp_r2", "int_trauma_witness_r2", "int_trauma_heard_r2",
"edu_status_diff", "distancekmfromcamps")
quant_vars_used <- c("refugee", "num_child", "hh_head_sex", "hh_head_age", #"int_sex", "int_age",
"parent_eduyears", "parent_reledu",
"eld_sex", "eld_age",
"hh_asset_index", "hh_income",
"int_trauma_exp")
qual_vars <- c("religious", "secular", "no_ambition", "vague_job", "job_secular",
"vocational_training", "entrepreneur", "education_low", "education_neutral",
"education_high", "education_religious", "marriage", "migration",
"vague_non_specific", "reliance_on_god", "ability_high", "ability_low",
"budget_high", "budget_low", "awareness_information_high",
"awareness_information_low", "camp_regulations", "covid_impacts",
"public_assistance", "worries_anxieties")
qual_vars <- c("religious", "secular", "no_ambition", "vague_job", "job_secular",
"vocational_training", "entrepreneur", "education_low", "education_neutral",
"education_high", "education_religious", "marriage", "migration",
"vague_non_specific", "reliance_on_god", "ability_high", "ability_low",
"budget_high", "budget_low", "awareness_information_high",
"awareness_information_low")
# Import the locally stored data
quant_df <- read.csv("data/clean_data/quant/hh_quant.csv", stringsAsFactors = FALSE)
## Define the options
model <- "multimethod-nosplit_asp"
model <- "multimethod-broad_asp"
#model <- "multimethod_asp"
#model <- "base-nosplit_asp_EN"
## Import the bootstrapped enhanced samples
enh_df <- read.csv(paste0(btstrp_dir,model, "/kfold_enh_pred_mean.csv"),
stringsAsFactors = FALSE)
enh_df <- read.csv(paste0(btstrp_dir,model, "/kfold_enh_pred_mean.csv"),
stringsAsFactors = FALSE)
annot_uids <- unique(enh_df$uid[which(enh_df$annotation_status != "unannotated")])
unannot_uids <- unique(enh_df$uid[which(enh_df$annotation_status == "unannotated")])
# Calculate and append medians
meds_df <- enh_df %>%
group_by(uid) %>%
summarise(across(where(is.numeric), mean),
across(where(is.character), median))
meds_df$bootstrap_run <- "average"
all(meds_df$annotation_status[which(meds_df$uid %in% annot_uids)] == "annotated")
enh_df <- rbind(enh_df, meds_df)
length(unique(enh_df$uid))
# Merge in quant data
enh_df <- combine_w_quant(enh_df, quant_df, round = "r2_r3")
meds_df <- combine_w_quant(as.data.frame(meds_df), quant_df, round = "r2_r3")
mean(meds_df$eld_age)
mean(meds_df$eld_age, na.rm = T)
mean(meds_df$int_age, na.rm = T)
sum(!is.na(meds_df$int_age))
sd(meds_df$int_age, na.rm = T)
sd(meds_df$eld_sex, na.rm = T)
mean(meds_df$eld_age, na.rm = T)
meds_df$eld_age
mean(meds_df$eld_age[which(meds_df$eld_age < 18)])
meds_df$job_secular
meds_df$job_secular_act
mean(meds_df$job_secular_act)
mean(meds_df$job_secular_act, na.rm = T)
mean(meds_df$no_ambition_act, na.rm = T)
mean(meds_df$education_neutral, na.rm = T)
789*12.6
setwd("/Users/julianashwin/Documents/GitHub/MortalityEstimation/")
rm(list=ls())
require(ggplot2)
require(ggpubr)
require(HMDHFDplus)
require(stringr)
require(plyr)
bp_5y_df <- read.csv("data/clean/bp_5y.csv", stringsAsFactors = FALSE)
bp_le_plt <- ggplot(bp_5y_df[which(bp_5y_df$age == 0 & bp_5y_df$year > 1900),]) + theme_bw() +
geom_smooth(aes(x = year, y = ex_f), method = "lm") +
geom_point(aes(x = year, y = ex_f, color = name)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_discrete(name = "Country") + ggtitle("Life Expectancy") +
xlab("Year") + ylab("Life Expectancy at birth")
bp_h_plt <- ggplot(bp_5y_df[which(bp_5y_df$age == 0 & bp_5y_df$year > 1900),]) + theme_bw() +
geom_smooth(aes(x = year, y = -log(Hx_f)), method = "loess") +
geom_point(aes(x = year, y = -log(Hx_f), color = name)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_discrete(name = "Country") + ggtitle("Lifespan Equality") +
xlab("Year") + ylab("Lifespan Equality at birth")
bp_lstar_plt <- ggplot(bp_5y_df[which(bp_5y_df$age == 0 & bp_5y_df$year > 1900),]) + theme_bw() +
geom_smooth(aes(x = year, y = l_99p9_f), method = "loess") +
geom_point(aes(x = year, y = l_99p9_f, color = name)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_discrete(name = "Country") + ggtitle("Lifespan (99.9%)") +
xlab("Year") + ylab("Lifespan")
plt2 <- ggarrange(bp_le_plt, bp_h_plt, bp_lstar_plt, nrow = 1, ncol=3, common.legend = TRUE,
legend = "right")
ggarrange(plt1, plt2, nrow = 2, ncol=1, common.legend = FALSE)
bp_m_plt <- ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year") + ylim(c(0,1)) +
xlab("Age") + ylab("Mortality rate") + ggtitle("Mortality")
# Survival
bp_s_plt <- ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = lx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year") + ylim(c(0,1)) +
xlab("Age") + ylab("Survival rate") + ggtitle("Survival")
plt1 <- ggarrange(bp_m_plt, bp_s_plt, nrow = 1, ncol=2, common.legend = TRUE,
legend = "right")
ggarrange(plt1, plt2, nrow = 2, ncol=1, common.legend = FALSE)
bp_5y_df$year
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_fill_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900,1925,1950,1975,2000,2019),
labels=c(1900,1925,1950,1975,2000,2019),
limits=c(1900,2019)) +
ylim(c(0,1)) +
xlab("Age") + ylab("Mortality rate") + ggtitle("Mortality")
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_fill_gradientn(colours = rainbow(5), name = "Year")
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = ex_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year")
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = ex_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year") +
xlab("Age") + ylab("Remaining life expectancy") + ggtitle("Life expectancy")
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_fill_gradientn(colours = rainbow(5), name = "Year")
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year")
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year"),
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year")
ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900,1925,1950,1975,2000,2019),
labels=c(1900,1925,1950,1975,2000,2019),
limits=c(1900,2019)) +
ylim(c(0,1)) +
xlab("Age") + ylab("Mortality rate") + ggtitle("Mortality")
bp_s_plt <- ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = lx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900,1925,1950,1975,2000,2019),
labels=c(1900,1925,1950,1975,2000,2019),
limits=c(1900,2019)) +
ylim(c(0,1)) +
xlab("Age") + ylab("Survival rate") + ggtitle("Survival")
bp_s_plt
bp_m_plt <- ggplot(bp_5y_df[which(bp_5y_df$year > 1900),]) + theme_bw() +
geom_line(aes(x = age, y = mx_f, group = year, color = year)) +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900,1925,1950,1975,2000,2019),
labels=c(1900,1925,1950,1975,2000,2019),
limits=c(1900,2019)) +
ylim(c(0,1)) +
xlab("Age") + ylab("Mortality rate") + ggtitle("Mortality")
plt1 <- ggarrange(bp_m_plt, bp_s_plt, nrow = 1, ncol=2, common.legend = TRUE,
legend = "right")
plt2 <- ggarrange(bp_le_plt, bp_h_plt, bp_lstar_plt, nrow = 1, ncol=3, common.legend = TRUE,
legend = "right")
ggarrange(plt1, plt2, nrow = 2, ncol=1, common.legend = FALSE)
ggsave("figures/data/best_practice_5y_summary.pdf", width = 9, height = 6)
ggsave("figures/data/best_practice_5y_summary.pdf", width = 9, height = 6)
setwd("/Users/julianashwin/Documents/GitHub/MortalityEstimation/")
rm(list=ls())
require(ggplot2)
require(ggpubr)
require(HMDHFDplus)
require(stringr)
require(plyr)
require(zoo)
require(reshape2)
require(tidyr)
# Colour scheme
col_scheme <- c("Australia" = "darkolivegreen4",
"Canada" = "pink",
"France" = "blue3", "United Kingdom" = "darkgoldenrod4",
"Hong Kong" = "lightgoldenrod",
"Italy" = "forestgreen",
"Japan" = "red","New Zealand" = "black", "Russia" = "firebrick",
"Sweden" = "yellow", "United States of America" = "cornflowerblue",
"Other" = "gray")
"
Import and prepare data
"
# Import Best practice gradients
folder <- "figures/benchmark/"
LEgrad_df <- read.csv(paste0(folder,"siler_i2drift_LEgrads.csv"), stringsAsFactors = FALSE)
LEgrad_df$Forecast <- "Estimate"
LEgrad_df$Forecast[which(LEgrad_df$year > 2020)] <- "Forecast"
LEgrad_df$code <- "Best Practice"
bp_df <- LEgrad_df
bp_pars_df <- read.csv("figures/benchmark/siler_i2drift_preds.csv", stringsAsFactors = F)
bp_pars_df <- bp_pars_df[which(bp_pars_df$parameter %in% c("b","B","c","C","d","Lstar_99p9",
"Lstar_99","Lstar_95","Lstar_90")),]
bp_pars_df <- data.frame(pivot_wider(bp_pars_df, id_cols = c(year), names_from = parameter,
values_from = c(median)))
bp_df <- merge(bp_df, bp_pars_df, by = "year")
bp_mort_df <- read.csv("data/clean/bp_5y.csv", stringsAsFactors = FALSE)
bp_df <- merge(bp_df, bp_mort_df[,c("year", "age", "mx_f", "lx_f", "ex_f", "Hx_f",
"l_90_f","l_95_f","l_99_f","l_99p9_f",
"Female")],
by = c("year", "age"), all.x = T)
ggplot(bp_df[which(bp_df$year == 1903),]) + theme_bw() +
geom_line(aes(x = age, y = log(mortality), color = "Siler")) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_point(aes(x = age, y = log(mx_f)))
bp_df$LE_sum <- NA
bp_df$LE_sum2 <- NA
ggplot(bp_df) + theme_bw() +
geom_line(aes(x = age, y = LE_Cs, group = year, color = year, linetype = Forecast)) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
scale_color_gradientn(colours = rainbow(5), name = "Year") +
xlab("Age") + ylab("Gradient") +
ggtitle(expression(Gradient~of~LE~wrt~C[t]))
unique(bp_df$year)
ggplot(bp_df) + theme_bw() +
geom_line(aes(x = age, y = LE_Cs, group = year, color = year, linetype = Forecast)) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900, 1950, 2000,2049),
labels=c(1900,1950,2000,2049),
limits=c(1900,2049)) +
xlab("Age") + ylab("Gradient") +
ggtitle(expression(Gradient~of~LE~wrt~C[t]))
ggplot(bp_df) + theme_bw() +
geom_line(aes(x = age, y = LE_cs, group = year, color = year, linetype = Forecast)) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900, 1950, 2000,2049),
labels=c(1900,1950,2000,2049),
limits=c(1900,2049)) +
xlab("Age") + ylab("Gradient") +
ggtitle(expression(Gradient~of~LE~wrt~c[t]))
ggplot(bp_df) + theme_bw() +
geom_line(aes(x = age, y = LE_cC, group = year, color = year, linetype = Forecast)) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900, 1950, 2000,2049),
labels=c(1900,1950,2000,2049),
limits=c(1900,2049)) +
xlab("Age") + ylab("Cross-derivative") +
ggtitle(expression(Cross~derivative~of~LE~wrt~c[t]~and~C[t]))
ggarrange(bp_lec_plt, bp_leC_plt, nrow = 1, ncol = 2, common.legend = TRUE,
legend = "right")
bp_leC_plt <- ggplot(bp_df) + theme_bw() +
geom_line(aes(x = age, y = LE_Cs, group = year, color = year, linetype = Forecast)) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900, 1950, 2000,2049),
labels=c(1900,1950,2000,2049),
limits=c(1900,2049)) +
xlab("Age") + ylab("Gradient") +
ggtitle(expression(Gradient~of~LE~wrt~C[t]))
bp_lec_plt <- ggplot(bp_df) + theme_bw() +
geom_line(aes(x = age, y = LE_cs, group = year, color = year, linetype = Forecast)) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900, 1950, 2000,2049),
labels=c(1900,1950,2000,2049),
limits=c(1900,2049)) +
xlab("Age") + ylab("Gradient") +
ggtitle(expression(Gradient~of~LE~wrt~c[t]))
bp_lecC_plt <- ggplot(bp_df) + theme_bw() +
geom_line(aes(x = age, y = LE_cC, group = year, color = year, linetype = Forecast)) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
scale_color_gradientn(colours = rainbow(5), name = "Year",
breaks=c(1900, 1950, 2000,2049),
labels=c(1900,1950,2000,2049),
limits=c(1900,2049)) +
xlab("Age") + ylab("Cross-derivative") +
ggtitle(expression(Cross~derivative~of~LE~wrt~c[t]~and~C[t]))
ggarrange(bp_lec_plt, bp_leC_plt, nrow = 1, ncol = 2, common.legend = TRUE,
legend = "right")
ggsave(paste0("figures/benchmark/LEgrads_cC.pdf"), width = 10, height = 4)
