ggplot(aes(x = ages)) + theme_bw() +
geom_line(aes(y = log(total)), color = "black") +
geom_line(aes(y = log(value), color = name), linetype = "dashed") +
coord_cartesian(ylim = c(-12, 0)) +
scale_color_manual(values = c("blue3", "forestgreen", "firebrick")) +
labs(bp_fdm_mx <- reshape2::melt(bp_fdm_mx, id = "age", variable.name = "year",value.name = "mx_FDM")
bp_fdm_mx$year <- as.numeric(str_remove(bp_fdm_mx$year, "X"))
}
# Estimate forecast
bp_LC_fc <- forecast(bp_LC, jumpchoice="fit", h = nahead)
bp_lt_fc <- lifetable(bp_LC_fc)
bp_fdm_lt_fc <- NULL
if (adj == "none"){
bp_fdm_lt_fc <- NULL
try({
bp_FDM_fc <- suppressWarnings(forecast(bp_fdm, jumpchoice="fit", h = nahead))
bp_FDM_fc$year <- bp_lt_fc$year
bp_fdm_lt_fc <- suppressWarnings(lifetable(bp_FDM_fc))
})
FDM <- TRUE
}
if (is.null(bp_fdm_lt_fc)){
FDM <- FALSE
if (adj == "none"){
print(str_c("FDM not worked for ", cc, " estimated in ", yy))
}
}
# Forecast ex
bp_ex_fc <- data.frame(bp_lt_fc$ex)
bp_ex_fc$age <- rownames(bp_ex_fc)
bp_ex_fc <- reshape2::melt(bp_ex_fc, id = "age", variable.name = "year",value.name = "ex_LC")
bp_ex_fc$year <- as.numeric(str_remove(bp_ex_fc$year, "X"))
if (adj == "none"){
if (FDM){
bp_fdm_ex_fc <- data.frame(bp_fdm_lt_fc$ex)
bp_fdm_ex_fc$age <- rownames(bp_fdm_ex_fc)
bp_fdm_ex_fc <- reshape2::melt(bp_fdm_ex_fc, id = "age", variable.name = "year",value.name = "ex_FDM")
bp_fdm_ex_fc$year <- as.numeric(str_remove(bp_fdm_ex_fc$year, "X"))
}
}
# Forecast lx
bp_lx_fc <- data.frame(bp_lt_fc$lx)
bp_lx_fc$age <- rownames(bp_lx_fc)
bp_lx_fc <- reshape2::melt(bp_lx_fc, id = "age", variable.name = "year",value.name = "lx_LC")
bp_lx_fc$year <- as.numeric(str_remove(bp_lx_fc$year, "X"))
if (adj == "none"){
if (FDM){
bp_fdm_lx_fc <- data.frame(bp_fdm_lt_fc$lx)
bp_fdm_lx_fc$age <- rownames(bp_fdm_lx_fc)
bp_fdm_lx_fc <- reshape2::melt(bp_fdm_lx_fc, id = "age", variable.name = "year",value.name = "lx_FDM")
bp_fdm_lx_fc$year <- as.numeric(str_remove(bp_fdm_lx_fc$year, "X"))
}
}
# Forecast mx
bp_mx_fc <- data.frame(bp_lt_fc$mx)
bp_mx_fc$age <- rownames(bp_mx_fc)
bp_mx_fc <- reshape2::melt(bp_mx_fc, id = "age", variable.name = "year",value.name = "mx_LC")
bp_mx_fc$year <- as.numeric(str_remove(bp_mx_fc$year, "X"))
if (adj == "none"){
if (FDM){
bp_fdm_mx_fc <- data.frame(bp_fdm_lt_fc$mx)
bp_fdm_mx_fc$age <- rownames(bp_fdm_mx_fc)
bp_fdm_mx_fc <- reshape2::melt(bp_fdm_mx_fc, id = "age", variable.name = "year",value.name = "mx_FDM")
bp_fdm_mx_fc$year <- as.numeric(str_remove(bp_fdm_mx_fc$year, "X"))
}
}
# Merge results
temp_df <- merge(rbind(bp_mx,bp_mx_fc), rbind(bp_lx,bp_lx_fc),
by = c("year", "age"))
temp_df <- merge(temp_df, rbind(bp_ex,bp_ex_fc),
by = c("year", "age"))
if (adj == "none"){
if (FDM){
temp_df <- merge(temp_df, rbind(bp_fdm_mx,bp_fdm_mx_fc),
by = c("year", "age"))
temp_df <- merge(temp_df, rbind(bp_fdm_lx,bp_fdm_lx_fc),
by = c("year", "age"))
temp_df <- merge(temp_df, rbind(bp_fdm_ex,bp_fdm_ex_fc),
by = c("year", "age"))
} else {
temp_df[,c("mx_FDM", "lx_FDM", "ex_FDM")] <- NA
}
}
temp_df$age <- as.numeric(temp_df$age)
temp_df <- temp_df[order(temp_df$year, temp_df$age),]
return(temp_df)
}
temp_df <- create_LC_df(mx_matrix, pop_matrix, "none", cc, nahead = 6)
names(temp_df)[3:ncol(temp_df)] <- paste0(names(temp_df)[3:ncol(temp_df)], roll)
temp_df_dt <- create_LC_df(mx_matrix, pop_matrix, "dt", cc, nahead = 6)
names(temp_df_dt)[3:5] <- paste0(names(temp_df_dt)[3:5], paste0("_dt", roll))
temp_df_dxt <- create_LC_df(mx_matrix, pop_matrix, "dxt", cc, nahead = 6)
names(temp_df_dxt)[3:5] <- paste0(names(temp_df_dxt)[3:5], paste0("_dxt", roll))
temp_df_e0 <- create_LC_df(mx_matrix, pop_matrix, "e0", cc, nahead = 6)
names(temp_df_e0)[3:5] <- paste0(names(temp_df_e0)[3:5], paste0("_e0", roll))
temp_df_smm <- create_StMoMo_df(mx_matrix, pop_matrix, "e0", cc, nahead = 6)
names(temp_df_smm)[3:8] <- paste0(names(temp_df_smm)[3:8], roll)
temp_df_smm$est_year <- yy
if (roll == "_r"){
temp_df_r <- cbind(temp_df, temp_df_dt[,3:5], temp_df_dxt[,3:5], temp_df_e0[,3:5])
temp_df_r$est_year <- yy
temp_df_r$name <- cc
temp_df_r <- merge(temp_df_r, temp_df_smm, by = c("year", "age", "est_year"), all.x = T)
} else {
temp_df <- cbind(temp_df, temp_df_dt[,3:5], temp_df_dxt[,3:5], temp_df_e0[,3:5])
temp_df$est_year <- yy
temp_df$name <- cc
temp_df <- merge(temp_df, temp_df_smm, by = c("year", "age", "est_year"), all.x = T)
}
LC_df <- data.frame()
cc <- country_names[1]
yy <- est_years[1]
for (cc in country_names){
print(paste0("Lee-Carter forecasts for ", cc))
country_df <- mort_df[which(mort_df$name == cc & mort_df$year >= 1900),]
#bp_df <- mort_df[which(mort_df$name == "New Zealand"),]
country_LC_df <- LC_df[0,]
for (yy in est_years){
for (roll in c("_r", "")){
if (roll == "_r"){
mx_matrix <- cast(country_df[which(country_df$year <= yy & country_df$year > yy-50 ),
c("year", "age", "mx_f")],
age ~ year, value = "mx_f")
pop_matrix <- cast(country_df[which(country_df$year <= yy & country_df$year > yy-50),
c("year", "age", "Female")],
age ~ year, value = "Female")
if (all(is.na(pop_matrix[,2:ncol(pop_matrix)]))){
pop_matrix <- cast(country_df[which(country_df$year <= yy & country_df$year > yy-50),
c("year", "age", "lx_f")],
age ~ year, value = "lx_f")
}
} else {
mx_matrix <- cast(country_df[which(country_df$year <= yy),c("year", "age", "mx_f")],
age ~ year, value = "mx_f")
pop_matrix <- cast(country_df[which(country_df$year <= yy),c("year", "age", "Female")],
age ~ year, value = "Female")
if (all(is.na(pop_matrix[,2:ncol(pop_matrix)]))){
pop_matrix <- cast(country_df[which(country_df$year <= yy),c("year", "age", "lx_f")],
age ~ year, value = "lx_f")
}
}
if (ncol(mx_matrix) > 6){
# Carry over pop data if missing
for (ii in 2:ncol(pop_matrix)){
pop_matrix[which(is.na(pop_matrix[,ii])),ii] <- pop_matrix[which(is.na(pop_matrix[,ii])),(ii-1)]
pop_matrix[which(pop_matrix[,ii]==0),ii] <- 0.01
}
# Possible adjustments: "dt", "dxt", "e0", "none"
# No adjustment
temp_df <- create_LC_df(mx_matrix, pop_matrix, "none", cc, nahead = 6)
names(temp_df)[3:ncol(temp_df)] <- paste0(names(temp_df)[3:ncol(temp_df)], roll)
# Lee-Carter adjustment
temp_df_dt <- create_LC_df(mx_matrix, pop_matrix, "dt", cc, nahead = 6)
names(temp_df_dt)[3:5] <- paste0(names(temp_df_dt)[3:5], paste0("_dt", roll))
# BMS adjustment
temp_df_dxt <- create_LC_df(mx_matrix, pop_matrix, "dxt", cc, nahead = 6)
names(temp_df_dxt)[3:5] <- paste0(names(temp_df_dxt)[3:5], paste0("_dxt", roll))
# Life expectancy adjustment
temp_df_e0 <- create_LC_df(mx_matrix, pop_matrix, "e0", cc, nahead = 6)
names(temp_df_e0)[3:5] <- paste0(names(temp_df_e0)[3:5], paste0("_e0", roll))
# Models from StMoMo package
temp_df_smm <- create_StMoMo_df(mx_matrix, pop_matrix, "e0", cc, nahead = 6)
names(temp_df_smm)[3:8] <- paste0(names(temp_df_smm)[3:8], roll)
temp_df_smm$est_year <- yy
# Combine
if (roll == "_r"){
temp_df_r <- cbind(temp_df, temp_df_dt[,3:5], temp_df_dxt[,3:5], temp_df_e0[,3:5])
temp_df_r$est_year <- yy
temp_df_r$name <- cc
temp_df_r <- merge(temp_df_r, temp_df_smm, by = c("year", "age", "est_year"), all.x = T)
} else {
temp_df <- cbind(temp_df, temp_df_dt[,3:5], temp_df_dxt[,3:5], temp_df_e0[,3:5])
temp_df$est_year <- yy
temp_df$name <- cc
temp_df <- merge(temp_df, temp_df_smm, by = c("year", "age", "est_year"), all.x = T)
}
flag <- TRUE
} else { # ncol < 10
flag <- FALSE
print(paste("Not enough data for", cc, "in", yy))
}
}
# Combine
if (flag){
temp_df <- merge(temp_df, temp_df_r, by = c("name", "year", "age", "est_year"), all.x = TRUE)
LC_df <- rbind(LC_df, temp_df)
}
}
}
rm(country_df, mx_matrix, pop_matrix, temp_df, temp_df_r, temp_df_dt, temp_df_dxt, temp_df_e0,
flag,yy,cc)
country_forecasts_df <- merge(mort_df, LC_df,by = c("name", "year", "age"), all.y = T)
names(country_forecasts_df)
ggplot(country_forecasts_df[which(country_forecasts_df$age == 0),]) + theme_bw() +
facet_wrap(name~., ncol = 5, scales = "free") + theme(legend.position="top") +
geom_point(aes(x = year, y = ex_f), shape = 3, size = 0.5) +
scale_color_manual("Model", values = model_cols) +
geom_line(aes(x = year, y = ex_LC_SMM_r, group = est_year, color = "Lee-Carter (StMoMo)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_CBD_SMM_r, group = est_year, color= "CBD"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_dxt_r, group = est_year, color = "Lee-Carter (dxt)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_e0_r, group = est_year, color = "Lee-Carter (e0)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_FDM_r, group = est_year, color = "FDM"), alpha =0.3) +
#geom_line(aes(x = year, y = ex_siler, group = est_year, color = "Siler")) +
xlab("Year") + ylab("Life expectancy at birth")
ggplot(country_forecasts_df[which(country_forecasts_df$age == 0),]) + theme_bw() +
facet_wrap(name~., ncol = 5, scales = "free") + theme(legend.position="top") +
geom_point(aes(x = year, y = ex_f), shape = 3, size = 0.5) +
scale_color_manual("Model", values = model_cols) +
geom_line(aes(x = year, y = ex_LC_SMM_r, group = est_year, color = "Lee-Carter"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_dt_r, group = est_year, color= "Lee-Carter (dt)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_dxt_r, group = est_year, color = "Lee-Carter (dxt)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_e0_r, group = est_year, color = "Lee-Carter (e0)"), alpha =0.3) +
#geom_line(aes(x = year, y = ex_siler, group = est_year, color = "Siler")) +
xlab("Year") + ylab("Life expectancy at birth")
country_siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 7))
names(country_siler_df) <-c("name","year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
cc <- countries[1]
yy <- est_years[1]
country_df <- mort_df[which(mort_df$name == cc & mort_df$year >= 1900),]
code <- unique(country_df$code)
cc
cc <- country_names[1]
yy <- est_years[1]
country_df <- mort_df[which(mort_df$name == cc & mort_df$year >= 1900),]
code <- unique(country_df$code)
(paste0(code,"_LEgrad_oos.csv") %in% dir("figures/countries/held-out/"))
print(paste0("Siler forecasts for ", cc))
sil_forecasts_df <- read.csv(paste0("figures/countries/held-out/", code,"_LEgrad_oos.csv"), stringsAsFactors = F)
sil_forecasts_df$Forecast <- "Estimate"
sil_forecasts_df$Forecast[which(sil_forecasts_df$forecast == 1)] <- "Forecast"
sil_forecasts_df$`Estimation Year` <- as.character(sil_forecasts_df$est_year)
sil_forecasts_df <- merge(sil_forecasts_df, bp_df[,c("year", "age", "Female")],
by = c("year", "age"), all.x = T)
est_years <- sort(unique(sil_forecasts_df$est_year))
siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 6))
names(siler_df) <-c("year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
mx_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "mortality")],
age ~ year, value = "mortality")
pop_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "Female")],
age ~ year, value = "Female")
siler_demdata <- demogdata(data=mx_matrix[,2:ncol(mx_matrix)],
pop = pop_matrix[2:ncol(mx_matrix)],
ages=mx_matrix$age,
years = as.numeric(names(mx_matrix[,2:ncol(mx_matrix)])),
type= "mortality",label="Siler", name="female")
siler_lt <- lifetable(siler_demdata, ages = siler_demdata$age)
siler_ex <- data.frame(siler_lt$ex)
siler_ex$age <- rownames(siler_ex)
siler_ex <- reshape2::melt(siler_ex, id = "age", variable.name = "year",value.name = "ex_siler")
siler_ex$year <- as.numeric(str_remove(siler_ex$year, "X"))
siler_lx <- data.frame(siler_lt$lx)
siler_lx$age <- rownames(siler_lx)
siler_lx <- reshape2::melt(siler_lx, id = "age", variable.name = "year",value.name = "lx_siler")
siler_lx$year <- as.numeric(str_remove(siler_lx$year, "X"))
siler_mx <- data.frame(siler_lt$mx)
siler_mx$age <- rownames(siler_mx)
siler_mx <- reshape2::melt(siler_mx, id = "age", variable.name = "year",value.name = "mx_siler")
siler_mx$year <- as.numeric(str_remove(siler_mx$year, "X"))
# Add the recalculated life expectancy to the bottom of the df
siler_ex$est_year <- yy
temp_df <- merge(siler_ex, siler_mx, by = c("year", "age"))
temp_df <- merge(temp_df, siler_lx, by = c("year", "age"))
siler_df <- rbind(siler_df, temp_df[names(siler_df)])
country_siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 7))
names(country_siler_df) <-c("name","year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
cc <- country_names[1]
yy <- est_years[1]
for (cc in country_names){
country_df <- mort_df[which(mort_df$name == cc & mort_df$year >= 1900),]
code <- unique(country_df$code)
if (paste0(code,"_LEgrad_oos.csv") %in% dir("figures/countries/held-out/")){
print(paste0("Siler forecasts for ", cc))
sil_forecasts_df <- read.csv(paste0("figures/countries/held-out/", code,"_LEgrad_oos.csv"), stringsAsFactors = F)
sil_forecasts_df$Forecast <- "Estimate"
sil_forecasts_df$Forecast[which(sil_forecasts_df$forecast == 1)] <- "Forecast"
sil_forecasts_df$`Estimation Year` <- as.character(sil_forecasts_df$est_year)
sil_forecasts_df <- merge(sil_forecasts_df, bp_df[,c("year", "age", "Female")],
by = c("year", "age"), all.x = T)
# Create a lifetable from the siler mortality estimates.
est_years <- sort(unique(sil_forecasts_df$est_year))
siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 6))
names(siler_df) <-c("year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
for (yy in est_years){
mx_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "mortality")],
age ~ year, value = "mortality")
pop_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "Female")],
age ~ year, value = "Female")
siler_demdata <- demogdata(data=mx_matrix[,2:ncol(mx_matrix)],
pop = pop_matrix[2:ncol(mx_matrix)],
ages=mx_matrix$age,
years = as.numeric(names(mx_matrix[,2:ncol(mx_matrix)])),
type= "mortality",label="Siler", name="female")
siler_lt <- lifetable(siler_demdata, ages = siler_demdata$age)
# Extract the life expectancy
siler_ex <- data.frame(siler_lt$ex)
siler_ex$age <- rownames(siler_ex)
siler_ex <- reshape2::melt(siler_ex, id = "age", variable.name = "year",value.name = "ex_siler")
siler_ex$year <- as.numeric(str_remove(siler_ex$year, "X"))
siler_lx <- data.frame(siler_lt$lx)
siler_lx$age <- rownames(siler_lx)
siler_lx <- reshape2::melt(siler_lx, id = "age", variable.name = "year",value.name = "lx_siler")
siler_lx$year <- as.numeric(str_remove(siler_lx$year, "X"))
siler_mx <- data.frame(siler_lt$mx)
siler_mx$age <- rownames(siler_mx)
siler_mx <- reshape2::melt(siler_mx, id = "age", variable.name = "year",value.name = "mx_siler")
siler_mx$year <- as.numeric(str_remove(siler_mx$year, "X"))
# Add the recalculated life expectancy to the bottom of the df
siler_ex$est_year <- yy
temp_df <- merge(siler_ex, siler_mx, by = c("year", "age"))
temp_df <- merge(temp_df, siler_lx, by = c("year", "age"))
siler_df <- rbind(siler_df, temp_df[names(siler_df)])
}
siler_df$name <- cc
country_siler_df <- rbind(country_siler_df, siler_df[,names(country_siler_df)])
}
}
rm(siler_df, temp_df, siler_ex, siler_lx, siler_mx, siler_demdata, sil_forecasts_df,
siler_lt, mx_matrix, pop_matrix)
int_forecasts_df <- merge(country_forecasts_df, country_siler_df,
by = c("name", "year", "age", "est_year"), all.x = T)
ggplot(int_forecasts_df[which(int_forecasts_df$age == 0 & !is.na(int_forecasts_df$ex_siler)),]) + theme_bw() +
facet_wrap(name~., nrow = 4, scales = "free") +
theme(legend.position = "top") +
geom_point(aes(x = year, y = ex_f), shape = 3, size = 0.5) +
scale_color_manual("Model", values = model_cols) +
geom_line(aes(x = year, y = ex_LC_e0_r, group = est_year, color = "Lee-Carter (e0)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_CBD_SMM_r, group = est_year, color = "CBD"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_dxt_r, group = est_year, color = "Lee-Carter (dxt)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_SMM_r, group = est_year, color = "Lee-Carter"), alpha =0.3) +
geom_line(aes(x = year, y = ex_siler, group = est_year, color = "Siler"), alpha =0.3) +
xlab("Year") + ylab("Life expectancy at birth")
int_forecasts_df$n_ahead <- int_forecasts_df$year - int_forecasts_df$est_year
int_forecasts_df$n_ahead[which(int_forecasts_df$n_ahead <= 0)] <- NA
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "siler")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_SMM")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "FDM")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "CBD_SMM")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dt")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dxt")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_e0")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_SMM_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "FDM_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "CBD_SMM_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dt_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dxt_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_e0_r")
write.csv(filter(int_forecasts_df, age == 0), "data/results/int_forecasts.csv", row.names = F)
View(country_forecasts_df)
View(forecasts_dist_df)
country_siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 7))
names(country_siler_df) <-c("name","year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
cc <- country_names[1]
yy <- est_years[1]
cc <- country_names[1]
yy <- est_years[1]
for (cc in country_names){
country_df <- mort_df[which(mort_df$name == cc & mort_df$year >= 1900),]
code <- unique(country_df$code)
if (paste0(code,"_LEgrad_oos.csv") %in% dir("figures/countries/held-out/")){
print(paste0("Siler forecasts for ", cc))
sil_forecasts_df <- read.csv(paste0("figures/countries/held-out/", code,"_LEgrad_oos.csv"), stringsAsFactors = F)
sil_forecasts_df$Forecast <- "Estimate"
sil_forecasts_df$Forecast[which(sil_forecasts_df$forecast == 1)] <- "Forecast"
sil_forecasts_df$`Estimation Year` <- as.character(sil_forecasts_df$est_year)
sil_forecasts_df <- merge(sil_forecasts_df, bp_df[,c("year", "age", "Female")],
by = c("year", "age"), all.x = T)
# Create a lifetable from the siler mortality estimates.
est_years <- sort(unique(sil_forecasts_df$est_year))
siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 6))
names(siler_df) <-c("year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
for (yy in est_years){
mx_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "mortality")],
age ~ year, value = "mortality")
pop_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "Female")],
age ~ year, value = "Female")
siler_demdata <- demogdata(data=mx_matrix[,2:ncol(mx_matrix)],
pop = pop_matrix[2:ncol(mx_matrix)],
ages=mx_matrix$age,
years = as.numeric(names(mx_matrix[,2:ncol(mx_matrix)])),
type= "mortality",label="Siler", name="female")
siler_lt <- lifetable(siler_demdata, ages = siler_demdata$age)
# Extract the life expectancy
siler_ex <- data.frame(siler_lt$ex)
siler_ex$age <- rownames(siler_ex)
siler_ex <- reshape2::melt(siler_ex, id = "age", variable.name = "year",value.name = "ex_siler")
siler_ex$year <- as.numeric(str_remove(siler_ex$year, "X"))
siler_lx <- data.frame(siler_lt$lx)
siler_lx$age <- rownames(siler_lx)
siler_lx <- reshape2::melt(siler_lx, id = "age", variable.name = "year",value.name = "lx_siler")
siler_lx$year <- as.numeric(str_remove(siler_lx$year, "X"))
siler_mx <- data.frame(siler_lt$mx)
siler_mx$age <- rownames(siler_mx)
siler_mx <- reshape2::melt(siler_mx, id = "age", variable.name = "year",value.name = "mx_siler")
siler_mx$year <- as.numeric(str_remove(siler_mx$year, "X"))
# Add the recalculated life expectancy to the bottom of the df
siler_ex$est_year <- yy
temp_df <- merge(siler_ex, siler_mx, by = c("year", "age"))
temp_df <- merge(temp_df, siler_lx, by = c("year", "age"))
siler_df <- rbind(siler_df, temp_df[names(siler_df)])
}
siler_df$name <- cc
country_siler_df <- rbind(country_siler_df, siler_df[,names(country_siler_df)])
}
}
rm(siler_df, temp_df, siler_ex, siler_lx, siler_mx, siler_demdata, sil_forecasts_df,
siler_lt, mx_matrix, pop_matrix)
int_forecasts_df <- merge(country_forecasts_df, country_siler_df,
by = c("name", "year", "age", "est_year"), all.x = T)
ggplot(int_forecasts_df[which(int_forecasts_df$age == 0 & !is.na(int_forecasts_df$ex_siler)),]) + theme_bw() +
facet_wrap(name~., nrow = 4, scales = "free") +
theme(legend.position = "top") +
geom_point(aes(x = year, y = ex_f), shape = 3, size = 0.5) +
scale_color_manual("Model", values = model_cols) +
geom_line(aes(x = year, y = ex_LC_e0_r, group = est_year, color = "Lee-Carter (e0)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_CBD_SMM_r, group = est_year, color = "CBD"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_dxt_r, group = est_year, color = "Lee-Carter (dxt)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_SMM_r, group = est_year, color = "Lee-Carter"), alpha =0.3) +
geom_line(aes(x = year, y = ex_siler, group = est_year, color = "Siler"), alpha =0.3) +
xlab("Year") + ylab("Life expectancy at birth")
country_siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 7))
names(country_siler_df) <-c("name","year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
cc <- country_names[1]
yy <- est_years[1]
for (cc in country_names){
country_df <- mort_df[which(mort_df$name == cc & mort_df$year >= 1900),]
code <- unique(country_df$code)
if (paste0(code,"_LEgrad_oos.csv") %in% dir("figures/countries/held-out/")){
print(paste0("Siler forecasts for ", cc))
sil_forecasts_df <- read.csv(paste0("figures/countries/held-out/", code,"_LEgrad_oos.csv"), stringsAsFactors = F)
sil_forecasts_df$Forecast <- "Estimate"
sil_forecasts_df$Forecast[which(sil_forecasts_df$forecast == 1)] <- "Forecast"
sil_forecasts_df$`Estimation Year` <- as.character(sil_forecasts_df$est_year)
sil_forecasts_df <- merge(sil_forecasts_df, bp_df[,c("year", "age", "Female")],
by = c("year", "age"), all.x = T)
# Create a lifetable from the siler mortality estimates.
est_years <- sort(unique(sil_forecasts_df$est_year))
siler_df <- data.frame(matrix(NA, nrow = 0, ncol = 6))
names(siler_df) <-c("year", "est_year", "age", "mx_siler", "lx_siler", "ex_siler")
for (yy in est_years){
mx_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "mortality")],
age ~ year, value = "mortality")
pop_matrix <- cast(sil_forecasts_df[which(sil_forecasts_df$est_year == yy),c("year", "age", "Female")],
age ~ year, value = "Female")
siler_demdata <- demogdata(data=mx_matrix[,2:ncol(mx_matrix)],
pop = pop_matrix[2:ncol(mx_matrix)],
ages=mx_matrix$age,
years = as.numeric(names(mx_matrix[,2:ncol(mx_matrix)])),
type= "mortality",label="Siler", name="female")
siler_lt <- lifetable(siler_demdata, ages = siler_demdata$age)
# Extract the life expectancy
siler_ex <- data.frame(siler_lt$ex)
siler_ex$age <- rownames(siler_ex)
siler_ex <- reshape2::melt(siler_ex, id = "age", variable.name = "year",value.name = "ex_siler")
siler_ex$year <- as.numeric(str_remove(siler_ex$year, "X"))
siler_lx <- data.frame(siler_lt$lx)
siler_lx$age <- rownames(siler_lx)
siler_lx <- reshape2::melt(siler_lx, id = "age", variable.name = "year",value.name = "lx_siler")
siler_lx$year <- as.numeric(str_remove(siler_lx$year, "X"))
siler_mx <- data.frame(siler_lt$mx)
siler_mx$age <- rownames(siler_mx)
siler_mx <- reshape2::melt(siler_mx, id = "age", variable.name = "year",value.name = "mx_siler")
siler_mx$year <- as.numeric(str_remove(siler_mx$year, "X"))
# Add the recalculated life expectancy to the bottom of the df
siler_ex$est_year <- yy
temp_df <- merge(siler_ex, siler_mx, by = c("year", "age"))
temp_df <- merge(temp_df, siler_lx, by = c("year", "age"))
siler_df <- rbind(siler_df, temp_df[names(siler_df)])
}
siler_df$name <- cc
country_siler_df <- rbind(country_siler_df, siler_df[,names(country_siler_df)])
}
}
rm(siler_df, temp_df, siler_ex, siler_lx, siler_mx, siler_demdata, sil_forecasts_df,
siler_lt, mx_matrix, pop_matrix)
int_forecasts_df <- merge(country_forecasts_df, country_siler_df,
by = c("name", "year", "age", "est_year"), all.x = T)
ggplot(int_forecasts_df[which(int_forecasts_df$age == 0 & !is.na(int_forecasts_df$ex_siler)),]) + theme_bw() +
facet_wrap(name~., nrow = 4, scales = "free") +
theme(legend.position = "top") +
geom_point(aes(x = year, y = ex_f), shape = 3, size = 0.5) +
scale_color_manual("Model", values = model_cols) +
geom_line(aes(x = year, y = ex_LC_e0_r, group = est_year, color = "Lee-Carter (e0)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_CBD_SMM_r, group = est_year, color = "CBD"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_dxt_r, group = est_year, color = "Lee-Carter (dxt)"), alpha =0.3) +
geom_line(aes(x = year, y = ex_LC_SMM_r, group = est_year, color = "Lee-Carter"), alpha =0.3) +
geom_line(aes(x = year, y = ex_siler, group = est_year, color = "Siler"), alpha =0.3) +
xlab("Year") + ylab("Life expectancy at birth")
int_forecasts_df$n_ahead <- int_forecasts_df$year - int_forecasts_df$est_year
int_forecasts_df$n_ahead[which(int_forecasts_df$n_ahead <= 0)] <- NA
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "siler")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_SMM")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "FDM")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "CBD_SMM")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dt")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dxt")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_e0")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_SMM_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "FDM_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "CBD_SMM_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dt_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_dxt_r")
int_forecasts_df <- compute_fe(int_forecasts_df, suffix = "LC_e0_r")
write.csv(filter(int_forecasts_df, age == 0), "data/results/int_forecasts.csv", row.names = F)
int_forecasts_df
write.csv(int_forecasts_df, "data/results/int_forecasts_full.csv", row.names = F)
476*1.3
(476*1.3)*50
r(cols = c(`Age independent (λ)`, `Later life (α and β)`)) %>%
mutate(name = factor(name, levels = c("Age independent (λ)", "Later life (α and β)"), ordered = T)) %>%
ggplot(aes(x = ages)) + theme_bw() +
geom_line(aes(y = log(total)), color = "black") +
geom_line(aes(y = log(value), color = name), linetype = "dashed") +
coord_cartesian(ylim = c(-10.2, 0)) +
scale_color_manual(values = c("forestgreen", "firebrick")) +
labs(x = "Age", y = expression(log(mu(a))), color = "Parts", title = "Gompertz-Makeham") +
theme(legend.position = c(0.33, 0.82), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#gompertz_example_plot
param_siler = list(B = 3.5, b = 1.5, C = 85, c = 0.09, d = 0.0004)
siler_example_plot <- tibble(ages = 0:109) %>%
mutate(`Infant (b and B)` = param_siler$b*exp(-param_siler$b*(ages + param_siler$B)),
`Age independent (d)` = param_siler$d,
`Later life (c and C)` = param_siler$c*exp(param_siler$c*(ages - param_siler$C)),
total = (`Infant (b and B)` + `Age independent (d)` + `Later life (c and C)`)) %>%
pivot_longer(cols = c(`Infant (b and B)`, `Age independent (d)`, `Later life (c and C)`)) %>%
mutate(name = factor(name, levels = c("Infant (b and B)", "Age independent (d)",
"Later life (c and C)"), ordered = T)) %>%
ggplot(aes(x = ages)) + theme_bw() +
geom_line(aes(y = log(total)), color = "black") +
geom_line(aes(y = log(value), color = name), linetype = "dashed") +
coord_cartesian(ylim = c(-10.2, 0)) +
scale_color_manual(values = c("blue3", "forestgreen", "firebrick")) +
labs(x = "Age", y = expression(log(mu(a))), color = "Parts", title = "Siler") +
theme(legend.position = c(0.33, 0.82), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#siler_example_plot
param_hp = list(A = 0.0009, B = 0.04, C = 0.1, D = 0.0005, E = 6.0,
F = 25.0, G = 0.00009, H = 1.08)
hp_example_plot <- tibble(ages = 0:109) %>%
mutate(`Infant (A, B and C)` = param_hp$A^((ages + param_hp$B)^param_hp$C) ,
`Accident hump (D, E and F)` = param_hp$D*exp(-param_hp$E*(log(ages) - log(param_hp$F))^2) ,
`Later life (G and H)` = param_hp$G*param_hp$H^(ages),
total = (`Infant (A, B and C)` + `Accident hump (D, E and F)` + `Later life (G and H)`)) %>%
pivot_longer(cols = c(`Infant (A, B and C)`, `Accident hump (D, E and F)`, `Later life (G and H)`)) %>%
mutate(name = factor(name, levels = c("Infant (A, B and C)", "Accident hump (D, E and F)",
"Later life (G and H)"), ordered = T)) %>%
ggplot(aes(x = ages)) + theme_bw() +
geom_line(aes(y = log(total/(1-total))), color = "black") +
geom_line(aes(y = log(value/(1-value)), color = name), linetype = "dashed") +
coord_cartesian(ylim = c(-10.2, 0)) +
scale_color_manual(values = c("blue3", "forestgreen", "firebrick")) +
labs(x = "Age", y = expression(log(mu(a))), color = "Parts", title = "Heligman-Pollard") +
theme(legend.position = c(0.33, 0.82), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#hp_example_plot
ggarrange(gompertz_example_plot, siler_example_plot, hp_example_plot, nrow = 1)
ggarrange(gompertz_example_plot, siler_example_plot, hp_example_plot, nrow = 1)
ggarrange(gompertz_example_plot, siler_example_plot, hp_example_plot, nrow = 1)
ggsave("figures_paper/mort_function_comparison.pdf", width = 10, height = 4, device = cairo_pdf)
param_gomp = list(C = 85, c = 0.09, d = 0.0004)
gompertz_example_plot <- tibble(ages = 0:109) %>%
mutate(`Age independent (λ)` = param_gomp$d,
`Later life (α & β)` = param_gomp$c*exp(param_gomp$c*(ages - param_gomp$C)),
total = (`Age independent (λ)` + `Later life (α & β)`)) %>%
pivot_longer(cols = c(`Age independent (λ)`, `Later life (α & β)`)) %>%
mutate(name = factor(name, levels = c("Age independent (λ)", "Later life (α & β)"), ordered = T)) %>%
ggplot(aes(x = ages)) + theme_bw() +
geom_line(aes(y = log(total)), color = "black") +
geom_line(aes(y = log(value), color = name), linetype = "dashed") +
coord_cartesian(ylim = c(-10.2, 0)) +
scale_color_manual(values = c("forestgreen", "firebrick")) +
labs(x = "Age", y = expression(log(mu(a))), color = "Parts", title = "Gompertz-Makeham") +
theme(legend.position = c(0.33, 0.82), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#gompertz_example_plot
param_siler = list(B = 3.5, b = 1.5, C = 85, c = 0.09, d = 0.0004)
siler_example_plot <- tibble(ages = 0:109) %>%
mutate(`Infant (b & B)` = param_siler$b*exp(-param_siler$b*(ages + param_siler$B)),
`Age independent (d)` = param_siler$d,
`Later life (c & C)` = param_siler$c*exp(param_siler$c*(ages - param_siler$C)),
total = (`Infant (b & B)` + `Age independent (d)` + `Later life (c & C)`)) %>%
pivot_longer(cols = c(`Infant (b & B)`, `Age independent (d)`, `Later life (c & C)`)) %>%
mutate(name = factor(name, levels = c("Infant (b & B)", "Age independent (d)",
"Later life (c & C)"), ordered = T)) %>%
ggplot(aes(x = ages)) + theme_bw() +
geom_line(aes(y = log(total)), color = "black") +
geom_line(aes(y = log(value), color = name), linetype = "dashed") +
coord_cartesian(ylim = c(-10.2, 0)) +
scale_color_manual(values = c("blue3", "forestgreen", "firebrick")) +
labs(x = "Age", y = expression(log(mu(a))), color = "Parts", title = "Siler") +
theme(legend.position = c(0.33, 0.82), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#siler_example_plot
param_hp = list(A = 0.0009, B = 0.04, C = 0.1, D = 0.0005, E = 6.0,
F = 25.0, G = 0.00009, H = 1.08)
hp_example_plot <- tibble(ages = 0:109) %>%
mutate(`Infant (A, B & C)` = param_hp$A^((ages + param_hp$B)^param_hp$C) ,
`Accident hump (D, E & F)` = param_hp$D*exp(-param_hp$E*(log(ages) - log(param_hp$F))^2) ,
`Later life (G & H)` = param_hp$G*param_hp$H^(ages),
total = (`Infant (A, B & C)` + `Accident hump (D, E & F)` + `Later life (G & H)`)) %>%
pivot_longer(cols = c(`Infant (A, B & C)`, `Accident hump (D, E & F)`, `Later life (G & H)`)) %>%
mutate(name = factor(name, levels = c("Infant (A, B & C)", "Accident hump (D, E & F)",
"Later life (G & H)"), ordered = T)) %>%
ggplot(aes(x = ages)) + theme_bw() +
geom_line(aes(y = log(total/(1-total))), color = "black") +
geom_line(aes(y = log(value/(1-value)), color = name), linetype = "dashed") +
coord_cartesian(ylim = c(-10.2, 0)) +
scale_color_manual(values = c("blue3", "forestgreen", "firebrick")) +
labs(x = "Age", y = expression(log(mu(a))), color = "Parts", title = "Heligman-Pollard") +
theme(legend.position = c(0.33, 0.82), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#hp_example_plot
ggarrange(gompertz_example_plot, siler_example_plot, hp_example_plot, nrow = 1)
ggsave("figures_paper/mort_function_comparison.pdf", width = 10, height = 4, device = cairo_pdf)
